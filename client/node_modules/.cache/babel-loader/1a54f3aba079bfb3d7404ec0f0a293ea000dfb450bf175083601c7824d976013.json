{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thanh Tran\\\\GatorFound-2\\\\client\\\\src\\\\components\\\\Comment.jsx\",\n  _s = $RefreshSig$();\n// src/components/Comment.jsx\nimport React, { useState, useEffect } from 'react';\nimport './Comment.css'; // Ensure CSS is imported\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Comment = ({\n  comment\n}) => {\n  _s();\n  const [showReplies, setShowReplies] = useState(false);\n  const [newReply, setNewReply] = useState('');\n  const [replies, setReplies] = useState([]);\n\n  // Fetch replies\n  // Fetch comments for the post\n  const fetchReplies = async id => {\n    try {\n      const response = await fetch(`http://localhost:5000/GatorFound/comments/${id}/replies`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': `${sessionStorage.getItem('token')}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch comments');\n      }\n      const data = await response.json();\n\n      // Handle case where no comments exist or malformed response\n      setComments(data.data.length ? data.data : []);\n    } catch (error) {\n      console.error('Error fetching comments:', error);\n      setComments([]); // On error, set to empty\n    }\n  };\n\n  // Load comments when the component mounts\n  useEffect(() => {\n    fetchComments(comment.id);\n  }, [comment.id]);\n  console.log(\"ITEM ID IS:\", comment.id);\n  // const handleReply = () => {S\n  //     if (newReply.trim()) {\n  //         const replyData = { id: Date.now(), text: newReply };\n  //         setReplies([...replies, replyData]);\n  //         setNewReply('');\n  //     }\n  // };\n  const handleReply = async () => {\n    if (newReply.trim()) {\n      try {\n        console.log(\"Reply is: \", newReply);\n        // Send a POST request using fetch to add the reply to the backend\n        const response = await fetch(`http://localhost:5000/GatorFound/comments/${comment.id}/replies`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'auth-token': `${sessionStorage.getItem('token')}`\n          },\n          body: JSON.stringify({\n            reply: newReply\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Failed to add reply');\n        }\n        const updatedComment = await response.json();\n        const reply = updatedComment.data;\n        // Update local state with the new reply\n        setReplies([...replies, reply]);\n        setNewReply(''); // Clear the input field\n      } catch (error) {\n        console.error('Error adding reply:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: comment.comment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"toggle-replies\",\n      onClick: () => setShowReplies(!showReplies),\n      children: showReplies ? '▼ Hide Replies' : '▶ Reply'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), showReplies && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"replies\",\n      children: [replies.map(reply => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reply\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: reply.reply\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 29\n        }, this)\n      }, reply.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 25\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reply-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newReply,\n          onChange: e => setNewReply(e.target.value),\n          placeholder: \"Add a reply...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleReply,\n          children: \"Reply\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n_s(Comment, \"gGddkbxZ3e8euT+ompiMtydYei0=\");\n_c = Comment;\nexport default Comment;\nvar _c;\n$RefreshReg$(_c, \"Comment\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Comment","comment","_s","showReplies","setShowReplies","newReply","setNewReply","replies","setReplies","fetchReplies","id","response","fetch","method","headers","sessionStorage","getItem","ok","Error","data","json","setComments","length","error","console","fetchComments","log","handleReply","trim","body","JSON","stringify","reply","updatedComment","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Thanh Tran/GatorFound-2/client/src/components/Comment.jsx"],"sourcesContent":["// src/components/Comment.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport './Comment.css'; // Ensure CSS is imported\r\n\r\nconst Comment = ({ comment }) => {\r\n    const [showReplies, setShowReplies] = useState(false);\r\n    const [newReply, setNewReply] = useState('');\r\n    const [replies, setReplies] = useState([]);\r\n\r\n    // Fetch replies\r\n    // Fetch comments for the post\r\n    const fetchReplies = async (id) => {\r\n        try {\r\n            \r\n            const response = await fetch(`http://localhost:5000/GatorFound/comments/${id}/replies`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'auth-token': `${sessionStorage.getItem('token')}`,\r\n                },\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to fetch comments');\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            // Handle case where no comments exist or malformed response\r\n            setComments(data.data.length? data.data: []);\r\n        } catch (error) {\r\n            console.error('Error fetching comments:', error);\r\n            setComments([]); // On error, set to empty\r\n        } \r\n    };\r\n\r\n    // Load comments when the component mounts\r\n    useEffect(() => {\r\n        fetchComments(comment.id);\r\n    }, [comment.id]);\r\n    console.log(\"ITEM ID IS:\" , comment.id);\r\n    // const handleReply = () => {S\r\n    //     if (newReply.trim()) {\r\n    //         const replyData = { id: Date.now(), text: newReply };\r\n    //         setReplies([...replies, replyData]);\r\n    //         setNewReply('');\r\n    //     }\r\n    // };\r\n    const handleReply = async () => {\r\n        if (newReply.trim()) {\r\n            try {\r\n                console.log(\"Reply is: \", newReply);\r\n                // Send a POST request using fetch to add the reply to the backend\r\n                const response = await fetch(`http://localhost:5000/GatorFound/comments/${comment.id}/replies`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'auth-token': `${sessionStorage.getItem('token')}`,\r\n\r\n                    },\r\n                    body: JSON.stringify({ reply: newReply }),\r\n                });\r\n                \r\n                if (!response.ok) {\r\n                    throw new Error('Failed to add reply');\r\n                }\r\n\r\n                const updatedComment = await response.json();\r\n                const reply = updatedComment.data;\r\n                // Update local state with the new reply\r\n                setReplies([...replies, reply]);\r\n                setNewReply(''); // Clear the input field\r\n            } catch (error) {\r\n                console.error('Error adding reply:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"comment\">\r\n            <p>{comment.comment}</p>\r\n            <button className=\"toggle-replies\" onClick={() => setShowReplies(!showReplies)}>\r\n                {showReplies ? '▼ Hide Replies' : '▶ Reply'}\r\n            </button>\r\n\r\n            {showReplies && (\r\n                <div className=\"replies\">\r\n                    {replies.map(reply => (\r\n                        <div key={reply.id} className=\"reply\">\r\n                            <p>{reply.reply}</p>\r\n                        </div>\r\n                    ))}\r\n                    <div className=\"reply-form\">\r\n                        <input\r\n                            type=\"text\"\r\n                            value={newReply}\r\n                            onChange={(e) => setNewReply(e.target.value)}\r\n                            placeholder=\"Add a reply...\"\r\n                        />\r\n                        <button onClick={handleReply}>Reply</button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comment;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}