{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thanh Tran\\\\GatorFound-2\\\\client\\\\src\\\\components\\\\PostList.jsx\";\n// src/components/PostList.jsx\nimport React, { useState } from 'react'; // Add the missing imports\nimport './PostList.css';\nimport PostItem from './PostItem'; // Import PostItem\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostList = ({\n  posts\n}) => {\n  // const [items, setItems] = useState([]);  // Define the state for storing items\n\n  //     // Fetch all items from the backend\n  // const fetchItems = async () => { \n  //     try {\n  //         const response = await fetch('http://localhost:5000/GatorFound/items', {\n  //         method: 'GET', // Explicitly specifying the method\n  //         headers: {\n  //             'Content-Type': 'application/json',\n  //             'auth-token': `${sessionStorage.getItem('token')}`,\n  //         },\n  //     });\n  //        if  (!response.ok) {\n  //         throw new Error(\"Failed to fetch items\");\n  //        }\n\n  //        const data = await response.json();\n\n  //        setItems(data.length? data : []);\n  //     } catch (error){\n  //         console.error(\"Error fetching items: \", error);\n  //         setItems\n  //     }\n  // }\n  // if (loading) {\n  //     return <p>Loading items...</p>;  // Show loading message while data is being fetched\n  // }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post-list\",\n    children: posts.length > 0 ? posts.map(post => /*#__PURE__*/_jsxDEV(PostItem, {\n      post: post\n    }, post._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }, this) // Use a unique key, preferably post.id\n    ) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"no-posts\",\n      children: \"No posts to show!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }, this) // Message if there are no posts\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_c = PostList;\nexport default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useState","PostItem","jsxDEV","_jsxDEV","PostList","posts","className","children","length","map","post","_id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Thanh Tran/GatorFound-2/client/src/components/PostList.jsx"],"sourcesContent":["// src/components/PostList.jsx\r\nimport React, { useState } from 'react';  // Add the missing imports\r\nimport './PostList.css';\r\nimport PostItem from './PostItem'; // Import PostItem\r\n\r\nconst PostList = ({posts}) => {\r\n    // const [items, setItems] = useState([]);  // Define the state for storing items\r\n\r\n    //     // Fetch all items from the backend\r\n    // const fetchItems = async () => { \r\n    //     try {\r\n    //         const response = await fetch('http://localhost:5000/GatorFound/items', {\r\n    //         method: 'GET', // Explicitly specifying the method\r\n    //         headers: {\r\n    //             'Content-Type': 'application/json',\r\n    //             'auth-token': `${sessionStorage.getItem('token')}`,\r\n    //         },\r\n    //     });\r\n    //        if  (!response.ok) {\r\n    //         throw new Error(\"Failed to fetch items\");\r\n    //        }\r\n\r\n    //        const data = await response.json();\r\n\r\n    //        setItems(data.length? data : []);\r\n    //     } catch (error){\r\n    //         console.error(\"Error fetching items: \", error);\r\n    //         setItems\r\n    //     }\r\n    // }\r\n    // if (loading) {\r\n    //     return <p>Loading items...</p>;  // Show loading message while data is being fetched\r\n    // }\r\n    return (\r\n        <div className=\"post-list\">\r\n            {posts.length > 0 ? (\r\n                posts.map((post) => (\r\n                    <PostItem key={post._id} post={post} /> // Use a unique key, preferably post.id\r\n                ))\r\n            ) : (\r\n                <p className=\"no-posts\">No posts to show!</p>  // Message if there are no posts\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostList;\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO,CAAC,CAAE;AAC1C,OAAO,gBAAgB;AACvB,OAAOC,QAAQ,MAAM,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,QAAQ,GAAGA,CAAC;EAACC;AAAK,CAAC,KAAK;EAC1B;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,oBACIF,OAAA;IAAKG,SAAS,EAAC,WAAW;IAAAC,QAAA,EACrBF,KAAK,CAACG,MAAM,GAAG,CAAC,GACbH,KAAK,CAACI,GAAG,CAAEC,IAAI,iBACXP,OAAA,CAACF,QAAQ;MAAgBS,IAAI,EAAEA;IAAK,GAArBA,IAAI,CAACC,GAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CAAC,CAAC;IAC3C,CAAC,gBAEFZ,OAAA;MAAGG,SAAS,EAAC,UAAU;MAAAC,QAAA,EAAC;IAAiB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAE;EAClD;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACC,EAAA,GAvCIZ,QAAQ;AAyCd,eAAeA,QAAQ;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}