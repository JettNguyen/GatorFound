{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thanh Tran\\\\GatorFound-2\\\\client\\\\src\\\\components\\\\PostList.jsx\";\n// src/components/PostList.jsx\nimport React, { useState, useEffect } from 'react'; // Add the missing imports\nimport './PostList.css';\nimport PostItem from './PostItem'; // Import PostItem\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostList = ({\n  posts\n}) => {\n  // const [items, setItems] = useState(posts || []);  // Define the state for storing items\n  // const [loading, setLoading] = useState(true);  // Define the loading state\n\n  // useEffect(() => {\n  //     // Fetch all items from the backend\n  //     fetch('http://localhost:5000/GatorFound/items', {\n  //         method: 'GET', // Explicitly specifying the method\n  //         headers: {\n  //             'Content-Type': 'application/json',\n  //         }\n  //     })\n  //         .then((response) => response.json())\n  //         .then((data) => {\n  //             setItems(data.data);  // Store fetched items\n\n  //             console.log(data);\n  //             setLoading(false);  // Stop loading once data is fetched\n  //             alert(\"Succesfsuuly\");\n  //         })\n  //         .catch((error) => {\n  //             console.error('Error fetching items:', error);\n  //             setLoading(false);  // Stop loading on error\n  //         });\n  // }, []);  // Empty dependency array means this effect runs once after the initial render\n\n  // if (loading) {\n  //     return <p>Loading items...</p>;  // Show loading message while data is being fetched\n  // }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post-list\",\n    children: post.length > 0 ? post.map(post => /*#__PURE__*/_jsxDEV(PostItem, {\n      post: post\n    }, post._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 21\n    }, this) // Use a unique key, preferably post.id\n    ) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"no-posts\",\n      children: \"No posts to show!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this) // Message if there are no posts\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_c = PostList;\nexport default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useState","useEffect","PostItem","jsxDEV","_jsxDEV","PostList","posts","className","children","post","length","map","_id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Thanh Tran/GatorFound-2/client/src/components/PostList.jsx"],"sourcesContent":["// src/components/PostList.jsx\r\nimport React, { useState, useEffect } from 'react';  // Add the missing imports\r\nimport './PostList.css';\r\nimport PostItem from './PostItem'; // Import PostItem\r\n\r\nconst PostList = ({posts}) => {\r\n    // const [items, setItems] = useState(posts || []);  // Define the state for storing items\r\n    // const [loading, setLoading] = useState(true);  // Define the loading state\r\n\r\n    // useEffect(() => {\r\n    //     // Fetch all items from the backend\r\n    //     fetch('http://localhost:5000/GatorFound/items', {\r\n    //         method: 'GET', // Explicitly specifying the method\r\n    //         headers: {\r\n    //             'Content-Type': 'application/json',\r\n    //         }\r\n    //     })\r\n    //         .then((response) => response.json())\r\n    //         .then((data) => {\r\n    //             setItems(data.data);  // Store fetched items\r\n                \r\n    //             console.log(data);\r\n    //             setLoading(false);  // Stop loading once data is fetched\r\n    //             alert(\"Succesfsuuly\");\r\n    //         })\r\n    //         .catch((error) => {\r\n    //             console.error('Error fetching items:', error);\r\n    //             setLoading(false);  // Stop loading on error\r\n    //         });\r\n    // }, []);  // Empty dependency array means this effect runs once after the initial render\r\n\r\n    // if (loading) {\r\n    //     return <p>Loading items...</p>;  // Show loading message while data is being fetched\r\n    // }\r\n    return (\r\n        <div className=\"post-list\">\r\n            {post.length > 0 ? (\r\n                post.map((post) => (\r\n                    <PostItem key={post._id} post={post} /> // Use a unique key, preferably post.id\r\n                ))\r\n            ) : (\r\n                <p className=\"no-posts\">No posts to show!</p>  // Message if there are no posts\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostList;\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO,CAAC,CAAE;AACrD,OAAO,gBAAgB;AACvB,OAAOC,QAAQ,MAAM,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,QAAQ,GAAGA,CAAC;EAACC;AAAK,CAAC,KAAK;EAC1B;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA,oBACIF,OAAA;IAAKG,SAAS,EAAC,WAAW;IAAAC,QAAA,EACrBC,IAAI,CAACC,MAAM,GAAG,CAAC,GACZD,IAAI,CAACE,GAAG,CAAEF,IAAI,iBACVL,OAAA,CAACF,QAAQ;MAAgBO,IAAI,EAAEA;IAAK,GAArBA,IAAI,CAACG,GAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CAAC,CAAC;IAC3C,CAAC,gBAEFZ,OAAA;MAAGG,SAAS,EAAC,UAAU;MAAAC,QAAA,EAAC;IAAiB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAE;EAClD;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACC,EAAA,GAxCIZ,QAAQ;AA0Cd,eAAeA,QAAQ;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}