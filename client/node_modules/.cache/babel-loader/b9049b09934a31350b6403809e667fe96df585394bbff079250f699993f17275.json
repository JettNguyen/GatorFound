{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thanh Tran\\\\GatorFound-2\\\\client\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Login from './components/Login';\nimport Hotbar from './components/Hotbar';\nimport HomePage from './components/HomePage'; // Import the HomePage component\nimport PostPage from './components/PostPage';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // Simulate login state\n  const [view, setView] = useState('home'); // Default view is the home page\n  const [allPosts, setAllPosts] = useState([]); // Initial all posts\n  const [lostPosts, setLostPosts] = useState([]); // Initial lost posts\n  const [foundPosts, setFoundPosts] = useState([]); // Initial found posts\n  const [userPosts, setUserPosts] = useState([]); // User-created posts\n\n  // Fetch all posts calling get method(items)\n  const fetchAllPosts = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/GatorFound/items/all', {\n        method: 'GET',\n        // Explicitly specifying the method\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': `${sessionStorage.getItem('token')}`\n        }\n      });\n      const data = await response.json();\n      if (!response.ok) alert(data.message);else setAllPosts(data.data); // Store fetched items, or set empty array on error\n    } catch (error) {\n      console.error('Error fetching items:', error);\n      setAllPosts([]); // Fallback to empty array on error\n    }\n  };\n\n  // Fetch user post only from backend when logged in\n  const fetchPosts = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/GatorFound/items', {\n        method: 'GET',\n        // Explicitly specifying the method\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': `${sessionStorage.getItem('token')}`\n        }\n      });\n      const data = await response.json();\n      if (!response.ok) alert(data.message);else setUserPosts(data.data); // Store fetched items, or set empty array on error\n    } catch (error) {\n      console.error('Error fetching items:', error);\n      setUserPosts([]); // Fallback to empty array on error\n    }\n  };\n  // Fetch when log in state change\n  useEffect(() => {\n    if (isLoggedIn) {\n      fetchAllPosts();\n      fetchPosts(); // Fetch posts when logged in\n    }\n  }, [isLoggedIn]); // Dependency: re-fetch when `isLoggedIn` changes\n\n  // Filter lost and found posts whenever userPosts change\n  useEffect(() => {\n    if (allPosts && isLoggedIn) {\n      setLostPosts(allPosts.filter(post => post.postType === 'lost'));\n      setFoundPosts(allPosts.filter(post => post.postType === 'found'));\n      fetchAllPosts();\n      fetchPosts();\n    }\n  }, [allPosts]); // Dependency: re-filter when `userPosts` changes\n\n  // Handle creating a new post\n  const handleNewPost = async newPost => {\n    setUserPosts(prevUserPosts => {\n      const updatedPosts = prevUserPosts ? [...prevUserPosts, newPost] : [newPost];\n      // setLostPosts(updatedPosts.filter(post => post.postType === 'lost'));\n      // setFoundPosts(updatedPosts.filter(post => post.postType === 'found'));\n      return updatedPosts;\n    });\n    setAllPosts(prevAllPosts => {\n      const updatedPosts = prevAllPosts ? [...prevAllPosts, newPost] : [newPost];\n      setLostPosts(updatedPosts.filter(post => post.postType === 'lost'));\n      setFoundPosts(updatedPosts.filter(post => post.postType === 'found'));\n      return updatedPosts;\n    });\n    await fetchPosts();\n    await fetchAllPosts();\n  };\n  // Handle flag function\n  const handleFlag = async () => {\n    await fetchPosts();\n    await fetchAllPosts();\n  };\n  // Set login info in session\n  useEffect(() => {\n    const storedLoginState = sessionStorage.getItem('isLoggedIn');\n    if (storedLoginState === 'true') {\n      setIsLoggedIn(true);\n    }\n  }, []);\n  // Store login info in session\n  useEffect(() => {\n    sessionStorage.setItem('isLoggedIn', isLoggedIn ? 'true' : 'false');\n  }, [isLoggedIn]);\n\n  // If not logged in, show the login page\n  if (!isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(Login, {\n      setIsLoggedIn: setIsLoggedIn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Hotbar, {\n      setView: setView\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), view === 'home' && /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 33\n    }, this), \" \", (view === 'lost' || view === 'found' || view === 'yourPosts' || view === 'createLostPost' || view === 'createFoundPost') && /*#__PURE__*/_jsxDEV(PostPage, {\n      view: view,\n      lostPosts: lostPosts,\n      foundPosts: foundPosts,\n      userPosts: userPosts,\n      handleNewPost: handleNewPost,\n      handleFlag: handleFlag,\n      setUserPosts: setUserPosts,\n      setAllPosts: setAllPosts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"XdRt4xmTvJ2gJfptj5uXqQepc+k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Login","Hotbar","HomePage","PostPage","jsxDEV","_jsxDEV","App","_s","isLoggedIn","setIsLoggedIn","view","setView","allPosts","setAllPosts","lostPosts","setLostPosts","foundPosts","setFoundPosts","userPosts","setUserPosts","fetchAllPosts","response","fetch","method","headers","sessionStorage","getItem","data","json","ok","alert","message","error","console","fetchPosts","filter","post","postType","handleNewPost","newPost","prevUserPosts","updatedPosts","prevAllPosts","handleFlag","storedLoginState","setItem","fileName","_jsxFileName","lineNumber","columnNumber","className","children","_c","$RefreshReg$"],"sources":["C:/Users/Thanh Tran/GatorFound-2/client/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Login from './components/Login';\r\nimport Hotbar from './components/Hotbar';\r\nimport HomePage from './components/HomePage'; // Import the HomePage component\r\nimport PostPage from './components/PostPage';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false); // Simulate login state\r\n    const [view, setView] = useState('home'); // Default view is the home page\r\n    const [allPosts, setAllPosts] = useState([]); // Initial all posts\r\n    const [lostPosts, setLostPosts] = useState([]); // Initial lost posts\r\n    const [foundPosts, setFoundPosts] = useState([]); // Initial found posts\r\n    const [userPosts, setUserPosts] = useState([]); // User-created posts\r\n\r\n    // Fetch all posts calling get method(items)\r\n    const fetchAllPosts = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:5000/GatorFound/items/all', {\r\n                method: 'GET', // Explicitly specifying the method\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'auth-token': `${sessionStorage.getItem('token')}`,\r\n                }\r\n            });\r\n            const data = await response.json();\r\n            if (!response.ok) alert(data.message);\r\n            else setAllPosts(data.data);  // Store fetched items, or set empty array on error\r\n        } catch (error) {\r\n            console.error('Error fetching items:', error);\r\n            setAllPosts([]); // Fallback to empty array on error\r\n        }\r\n    };\r\n\r\n    // Fetch user post only from backend when logged in\r\n    const fetchPosts = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:5000/GatorFound/items', {\r\n                method: 'GET', // Explicitly specifying the method\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'auth-token': `${sessionStorage.getItem('token')}`,\r\n                }\r\n            });\r\n            const data = await response.json();\r\n            if (!response.ok) alert(data.message);\r\n            else setUserPosts(data.data);  // Store fetched items, or set empty array on error\r\n        } catch (error) {\r\n            console.error('Error fetching items:', error);\r\n            setUserPosts([]); // Fallback to empty array on error\r\n        }\r\n    };\r\n    // Fetch when log in state change\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            fetchAllPosts();\r\n            fetchPosts(); // Fetch posts when logged in\r\n        }\r\n    }, [isLoggedIn]);  // Dependency: re-fetch when `isLoggedIn` changes\r\n\r\n\r\n    // Filter lost and found posts whenever userPosts change\r\n    useEffect(() => {\r\n        if (allPosts && isLoggedIn) {\r\n            setLostPosts(allPosts.filter(post => post.postType === 'lost'));\r\n            setFoundPosts(allPosts.filter(post => post.postType === 'found'));\r\n            fetchAllPosts();\r\n            fetchPosts();\r\n        }\r\n    }, [allPosts]); // Dependency: re-filter when `userPosts` changes\r\n\r\n    // Handle creating a new post\r\n    const handleNewPost = async (newPost) => {\r\n        setUserPosts((prevUserPosts) => {\r\n            const updatedPosts = prevUserPosts ? [...prevUserPosts, newPost] : [newPost];\r\n            // setLostPosts(updatedPosts.filter(post => post.postType === 'lost'));\r\n            // setFoundPosts(updatedPosts.filter(post => post.postType === 'found'));\r\n            return updatedPosts;\r\n        });\r\n        setAllPosts((prevAllPosts) => {\r\n            const updatedPosts = prevAllPosts ? [...prevAllPosts, newPost] : [newPost];\r\n            setLostPosts(updatedPosts.filter(post => post.postType === 'lost'));\r\n            setFoundPosts(updatedPosts.filter(post => post.postType === 'found'));\r\n            return updatedPosts;\r\n        });\r\n        await fetchPosts();\r\n        await fetchAllPosts();\r\n    };\r\n    // Handle flag function\r\n    const handleFlag = async() =>{\r\n        await fetchPosts();\r\n        await fetchAllPosts();\r\n    };\r\n    // Set login info in session\r\n    useEffect(() => {\r\n        const storedLoginState = sessionStorage.getItem('isLoggedIn');\r\n        if (storedLoginState === 'true') {\r\n            setIsLoggedIn(true);\r\n        }\r\n    }, []);\r\n    // Store login info in session\r\n    useEffect(() => {\r\n        sessionStorage.setItem('isLoggedIn', isLoggedIn ? 'true' : 'false');\r\n    }, [isLoggedIn]);\r\n    \r\n\r\n    // If not logged in, show the login page\r\n    if (!isLoggedIn) {\r\n        return <Login setIsLoggedIn={setIsLoggedIn} />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Hotbar setView={setView} />\r\n            {view === 'home' && <HomePage />} {/* Render HomePage when view is home */}\r\n            {(view === 'lost' || view === 'found' || view === 'yourPosts' || view === 'createLostPost' || view === 'createFoundPost') && (\r\n                <PostPage\r\n                    view={view}\r\n                    lostPosts={lostPosts}\r\n                    foundPosts={foundPosts}\r\n                    userPosts={userPosts}\r\n                    handleNewPost={handleNewPost}\r\n                    handleFlag={handleFlag}\r\n                    setUserPosts={setUserPosts}\r\n                    setAllPosts = {setAllPosts}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}