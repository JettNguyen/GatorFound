{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thanh Tran\\\\GatorFound-2\\\\client\\\\src\\\\components\\\\CommentSection.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Comment from './Comment';\nimport './CommentSection.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommentSection = ({\n  itemID,\n  comments,\n  handleCommentSubmit\n}) => {\n  _s();\n  const [newComment, setNewComment] = useState('');\n  // Handle new comment connection\n  const handleNewComment = async () => {\n    if (newComment.trim()) {\n      try {\n        const response = await fetch(`http://localhost:5000/GatorFound/comments/${itemID}/comments`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'auth-token': `${sessionStorage.getItem('token')}`\n          },\n          body: JSON.stringify({\n            comment: newComment\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Failed to add comment');\n        }\n        const updatedComments = await response.json();\n        const comment = updatedComments.data;\n        console.log(\"New comment is: \", comment);\n        handleCommentSubmit(comment); // Send updated comments back to the parent\n        setNewComment(''); // Clear the input field\n      } catch (error) {\n        console.error('Error adding comment:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"Add a comment...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNewComment,\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-list\",\n      children: comments.map(com => {\n        return (\n          /*#__PURE__*/\n          // Get list of comments\n          _jsxDEV(Comment, {\n            comment: com\n          }, com.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 21\n          }, this)\n        );\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n_s(CommentSection, \"4CPgt7oQpkJXYA7nM53m+f+bai8=\");\n_c = CommentSection;\nexport default CommentSection;\nvar _c;\n$RefreshReg$(_c, \"CommentSection\");","map":{"version":3,"names":["React","useState","Comment","jsxDEV","_jsxDEV","CommentSection","itemID","comments","handleCommentSubmit","_s","newComment","setNewComment","handleNewComment","trim","response","fetch","method","headers","sessionStorage","getItem","body","JSON","stringify","comment","ok","Error","updatedComments","json","data","console","log","error","className","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","com","id","_c","$RefreshReg$"],"sources":["C:/Users/Thanh Tran/GatorFound-2/client/src/components/CommentSection.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Comment from './Comment';\r\nimport './CommentSection.css';\r\n\r\nconst CommentSection = ({ itemID, comments, handleCommentSubmit }) => {\r\n    const [newComment, setNewComment] = useState('');\r\n    // Handle new comment connection\r\n    const handleNewComment = async () => {\r\n        \r\n        if (newComment.trim()) {\r\n            try {\r\n                const response = await fetch(`http://localhost:5000/GatorFound/comments/${itemID}/comments`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'auth-token': `${sessionStorage.getItem('token')}`,\r\n                    },\r\n                    body: JSON.stringify({ comment: newComment }),\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to add comment');\r\n                }\r\n\r\n                const updatedComments = await response.json();\r\n                const comment = updatedComments.data;\r\n                console.log(\"New comment is: \", comment);\r\n                handleCommentSubmit(comment);  // Send updated comments back to the parent\r\n                setNewComment('');  // Clear the input field\r\n            } catch (error) {\r\n                console.error('Error adding comment:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"comment-section\">\r\n            <div className=\"comment-form\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={newComment}\r\n                    onChange={(e) => setNewComment(e.target.value)}\r\n                    placeholder=\"Add a comment...\"\r\n                />\r\n                <button onClick={handleNewComment}>Post</button>\r\n            </div>\r\n\r\n            <div className=\"comments-list\">\r\n                {comments.map((com) => {\r\n\r\n                return(\r\n                    // Get list of comments\r\n                    <Comment key={com.id} comment={com} />\r\n                );\r\n            })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CommentSection;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}