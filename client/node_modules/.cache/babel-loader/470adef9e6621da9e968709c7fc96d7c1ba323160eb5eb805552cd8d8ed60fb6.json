{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thanh Tran\\\\GatorFound-2\\\\client\\\\src\\\\components\\\\PostList.jsx\",\n  _s = $RefreshSig$();\n// src/components/PostList.jsx\nimport React, { useState, useEffect } from 'react'; // Add the missing imports\nimport './PostList.css';\nimport PostItem from './PostItem'; // Import PostItem\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostList = ({\n  posts\n}) => {\n  _s();\n  alert(\"HERE\");\n  const [items, setItems] = useState(posts || []); // Define the state for storing items\n  const [loading, setLoading] = useState(true); // Define the loading state\n\n  useEffect(() => {\n    // Fetch all items from the backend\n    fetch('http://localhost:3000/api/items', {\n      method: 'GET',\n      // Explicitly specifying the method\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(data => {\n      setItems(data); // Store fetched items\n      alert(\"Succesfsuuly\");\n      console.log(data);\n      setLoading(false); // Stop loading once data is fetched\n    }).catch(error => {\n      console.error('Error fetching items:', error);\n      setLoading(false); // Stop loading on error\n    });\n  }, []); // Empty dependency array means this effect runs once after the initial render\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading items...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 16\n    }, this); // Show loading message while data is being fetched\n  }\n  console.log(\"Items in state:\", items);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post-list\",\n    children: items.length > 0 ? items.map(post => /*#__PURE__*/_jsxDEV(PostItem, {\n      post: post\n    }, post._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }, this) // Use a unique key, preferably post.id\n    ) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"no-posts\",\n      children: \"No posts to show!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this) // Message if there are no posts\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n_s(PostList, \"GpL7So0ZtM4CGTNlzHHNTJzqM0k=\");\n_c = PostList;\nexport default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useState","useEffect","PostItem","jsxDEV","_jsxDEV","PostList","posts","_s","alert","items","setItems","loading","setLoading","fetch","method","headers","then","response","json","data","console","log","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","map","post","_id","_c","$RefreshReg$"],"sources":["C:/Users/Thanh Tran/GatorFound-2/client/src/components/PostList.jsx"],"sourcesContent":["// src/components/PostList.jsx\r\nimport React, { useState, useEffect } from 'react';  // Add the missing imports\r\nimport './PostList.css';\r\nimport PostItem from './PostItem'; // Import PostItem\r\n\r\nconst PostList = ({posts}) => {\r\n    alert(\"HERE\");\r\n    const [items, setItems] = useState(posts || []);  // Define the state for storing items\r\n    const [loading, setLoading] = useState(true);  // Define the loading state\r\n\r\n    useEffect(() => {\r\n        // Fetch all items from the backend\r\n        fetch('http://localhost:3000/api/items', {\r\n            method: 'GET', // Explicitly specifying the method\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                setItems(data);  // Store fetched items\r\n                alert(\"Succesfsuuly\");\r\n                console.log(data);\r\n                setLoading(false);  // Stop loading once data is fetched\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching items:', error);\r\n                setLoading(false);  // Stop loading on error\r\n            });\r\n    }, []);  // Empty dependency array means this effect runs once after the initial render\r\n\r\n    if (loading) {\r\n        return <p>Loading items...</p>;  // Show loading message while data is being fetched\r\n    }\r\n    console.log(\"Items in state:\", items);\r\n    return (\r\n        <div className=\"post-list\">\r\n            {items.length > 0 ? (\r\n                items.map((post) => (\r\n                    <PostItem key={post._id} post={post} /> // Use a unique key, preferably post.id\r\n                ))\r\n            ) : (\r\n                <p className=\"no-posts\">No posts to show!</p>  // Message if there are no posts\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostList;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO,CAAC,CAAE;AACrD,OAAO,gBAAgB;AACvB,OAAOC,QAAQ,MAAM,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,QAAQ,GAAGA,CAAC;EAACC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC1BC,KAAK,CAAC,MAAM,CAAC;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAACM,KAAK,IAAI,EAAE,CAAC,CAAC,CAAE;EAClD,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;;EAE/CC,SAAS,CAAC,MAAM;IACZ;IACAY,KAAK,CAAC,iCAAiC,EAAE;MACrCC,MAAM,EAAE,KAAK;MAAE;MACfC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC,CACGC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACZT,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAE;MACjBX,KAAK,CAAC,cAAc,CAAC;MACrBY,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjBP,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;IACxB,CAAC,CAAC,CACDU,KAAK,CAAEC,KAAK,IAAK;MACdH,OAAO,CAACG,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CX,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;IACxB,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC,CAAC,CAAE;;EAET,IAAID,OAAO,EAAE;IACT,oBAAOP,OAAA;MAAAoB,QAAA,EAAG;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAC,CAAE;EACrC;EACAR,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEZ,KAAK,CAAC;EACrC,oBACIL,OAAA;IAAKyB,SAAS,EAAC,WAAW;IAAAL,QAAA,EACrBf,KAAK,CAACqB,MAAM,GAAG,CAAC,GACbrB,KAAK,CAACsB,GAAG,CAAEC,IAAI,iBACX5B,OAAA,CAACF,QAAQ;MAAgB8B,IAAI,EAAEA;IAAK,GAArBA,IAAI,CAACC,GAAG;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CAAC,CAAC;IAC3C,CAAC,gBAEFxB,OAAA;MAAGyB,SAAS,EAAC,UAAU;MAAAL,QAAA,EAAC;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAE;EAClD;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACrB,EAAA,CAzCIF,QAAQ;AAAA6B,EAAA,GAAR7B,QAAQ;AA2Cd,eAAeA,QAAQ;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}