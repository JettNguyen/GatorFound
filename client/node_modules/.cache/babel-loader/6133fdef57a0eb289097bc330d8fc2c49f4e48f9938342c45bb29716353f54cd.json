{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thanh Tran\\\\GatorFound-2\\\\client\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\n// src/App.jsx\nimport React, { useState, useEffect } from 'react';\nimport Login from './components/Login';\nimport Hotbar from './components/Hotbar';\nimport HomePage from './components/HomePage'; // Import the HomePage component\nimport PostPage from './components/PostPage';\nimport fillerPosts from './fillerPosts.json'; // Import filler posts for testing\nimport './App.css';\nimport logo from './components/GatorFoundLogo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // Simulate login state\n  const [view, setView] = useState('home'); // Default view is the home page\n  const [lostPosts, setLostPosts] = useState([]); // Initial lost posts\n  const [foundPosts, setFoundPosts] = useState([]); // Initial found posts\n  const [userPosts, setUserPosts] = useState([]); // User-created posts\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      // Fetch all items from the backend\n      fetch('http://localhost:5000/GatorFound/items', {\n        method: 'GET',\n        // Explicitly specifying the method\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).then(data => {\n        setUserPosts(data.data); // Store fetched items\n        // Stop loading once data is fetched\n      }).catch(error => {\n        console.error('Error fetching items:', error);\n        // Stop loading on error\n      });\n    };\n    fetchPosts();\n  }, []); // Empty dependency array means this effect runs once after the initial render\n\n  useEffect(() => {\n    // Filter lost and found posts whenever fillerPosts change\n    setLostPosts(userPosts.filter(post => post.postType === 'lost'));\n    setFoundPosts(userPosts.filter(post => post.postType === 'found'));\n  }, [userPosts]);\n\n  // Handle creating a new post\n  const handleNewPost = newPost => {\n    setUserPosts([...userPosts, newPost]);\n    if (newPost.postType === 'lost') {\n      setLostPosts([...lostPosts, newPost]);\n    } else if (newPost.postType === 'found') {\n      setFoundPosts([...foundPosts, newPost]);\n    }\n  };\n  useEffect(() => {\n    const storedLoginState = sessionStorage.getItem('isLoggedIn');\n    if (storedLoginState === 'true') {\n      setIsLoggedIn(true);\n    }\n  }, []);\n  // If not logged in, show the login page\n  if (!isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(Login, {\n      setIsLoggedIn: setIsLoggedIn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Hotbar, {\n      setView: setView\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), view === 'home' && /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 33\n    }, this), \" \", (view === 'lost' || view === 'found' || view === 'yourPosts' || view === 'createLostPost' || view === 'createFoundPost') && /*#__PURE__*/_jsxDEV(PostPage, {\n      view: view,\n      lostPosts: lostPosts,\n      foundPosts: foundPosts,\n      userPosts: userPosts,\n      handleNewPost: handleNewPost,\n      setUserPosts: setUserPosts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"Eoi0cSP3fLKVFYttS0SNURK5tsM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Login","Hotbar","HomePage","PostPage","fillerPosts","logo","jsxDEV","_jsxDEV","App","_s","isLoggedIn","setIsLoggedIn","view","setView","lostPosts","setLostPosts","foundPosts","setFoundPosts","userPosts","setUserPosts","fetchPosts","fetch","method","headers","then","response","json","data","catch","error","console","filter","post","postType","handleNewPost","newPost","storedLoginState","sessionStorage","getItem","fileName","_jsxFileName","lineNumber","columnNumber","className","children","_c","$RefreshReg$"],"sources":["C:/Users/Thanh Tran/GatorFound-2/client/src/App.jsx"],"sourcesContent":["// src/App.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport Login from './components/Login';\r\nimport Hotbar from './components/Hotbar';\r\nimport HomePage from './components/HomePage'; // Import the HomePage component\r\nimport PostPage from './components/PostPage';\r\nimport fillerPosts from './fillerPosts.json'; // Import filler posts for testing\r\nimport './App.css';\r\nimport logo from './components/GatorFoundLogo.png';\r\n\r\nconst App = () => {\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false); // Simulate login state\r\n    const [view, setView] = useState('home'); // Default view is the home page\r\n    const [lostPosts, setLostPosts] = useState([]); // Initial lost posts\r\n    const [foundPosts, setFoundPosts] = useState([]); // Initial found posts\r\n    const [userPosts, setUserPosts] = useState([]); // User-created posts\r\n\r\n    useEffect(() => {\r\n        const fetchPosts = async() => {\r\n        // Fetch all items from the backend\r\n        fetch('http://localhost:5000/GatorFound/items', {\r\n            method: 'GET', // Explicitly specifying the method\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                setUserPosts(data.data);  // Store fetched items\r\n                 // Stop loading once data is fetched\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching items:', error);\r\n                  // Stop loading on error\r\n            })\r\n            \r\n        };\r\n        fetchPosts();\r\n    }, []);  // Empty dependency array means this effect runs once after the initial render\r\n    \r\n    useEffect(() => {\r\n        // Filter lost and found posts whenever fillerPosts change\r\n        setLostPosts(userPosts.filter(post => post.postType === 'lost'));\r\n        setFoundPosts(userPosts.filter(post => post.postType === 'found'));\r\n    }, [userPosts]); \r\n\r\n    // Handle creating a new post\r\n    const handleNewPost = (newPost) => {\r\n        setUserPosts([...userPosts, newPost]);\r\n\r\n        if (newPost.postType === 'lost') {\r\n            setLostPosts([...lostPosts, newPost]);\r\n        } else if (newPost.postType === 'found') {\r\n            setFoundPosts([...foundPosts, newPost]);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        const storedLoginState = sessionStorage.getItem('isLoggedIn');\r\n        if (storedLoginState === 'true') {\r\n            setIsLoggedIn(true);\r\n        }\r\n    }, []);\r\n    // If not logged in, show the login page\r\n    if (!isLoggedIn) {\r\n        return <Login setIsLoggedIn={setIsLoggedIn} />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Hotbar setView={setView} />\r\n            {view === 'home' && <HomePage />} {/* Render HomePage when view is home */}\r\n            {(view === 'lost' || view === 'found' || view === 'yourPosts' || view === 'createLostPost' || view === 'createFoundPost') && (\r\n                <PostPage\r\n                    view={view}\r\n                    lostPosts={lostPosts}\r\n                    foundPosts={foundPosts}\r\n                    userPosts={userPosts}\r\n                    handleNewPost={handleNewPost}\r\n                    setUserPosts = {setUserPosts}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}